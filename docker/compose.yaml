# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      dockerfile: Dockerfile
    volumes:
      - ./../application:/var/www/html
    ports:
      - 80:80

    # This section below is a database of how to define a MYSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts.
    depends_on:
      db:
        condition: service_healthy

  db:
    image: mysql:8.3.0
    restart: on-failure
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: database
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - 3306:3306
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # This section below is a database web service using adminer
  adminer:
    image: adminer
    restart: on-failure
    ports:
      - 8080:8080

  # This section below is a mail web service using mailcatcher
  mailer:
    restart: on-failure
    image: schickling/mailcatcher
    ports:
      - 1025:1080

volumes:
  db_data:
